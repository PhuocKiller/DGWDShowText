//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/RoboInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RoboInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RoboInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RoboInput"",
    ""maps"": [
        {
            ""name"": ""RoboActions"",
            ""id"": ""7b4c409f-ce20-4bb2-a374-dcb7d4e24747"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb4856d7-3e07-40df-ae75-e0b8c1d50370"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""3b53a173-fb6b-472c-9304-5dfc2e168ad2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""2b02d996-dc70-483a-a8fb-7a606b681fe0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ready"",
                    ""type"": ""Button"",
                    ""id"": ""07bd2cd4-84dc-425d-83b9-1332eb3c6897"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a870296d-21b5-49b9-a79a-62a10eb096f2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c677b61f-57f8-472a-bde9-673b89cb6d60"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04e1a339-b65c-4e91-b07e-a993ee74f2bb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0d54408f-9f6e-4034-b4da-f5f2447f41b4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9343f57d-8bcc-43ba-bbd6-fc6754fd8b1b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aedb23a9-49ce-486d-8640-821c4330a565"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72a811b2-0bfb-4693-aa78-144930c573b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf54b8c5-c4c1-4bed-8de0-9b7ba6c79269"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8037c70c-1675-4fce-8669-a53a198c5600"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RoboActions
        m_RoboActions = asset.FindActionMap("RoboActions", throwIfNotFound: true);
        m_RoboActions_Move = m_RoboActions.FindAction("Move", throwIfNotFound: true);
        m_RoboActions_MousePosition = m_RoboActions.FindAction("MousePosition", throwIfNotFound: true);
        m_RoboActions_Fire = m_RoboActions.FindAction("Fire", throwIfNotFound: true);
        m_RoboActions_Ready = m_RoboActions.FindAction("Ready", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RoboActions
    private readonly InputActionMap m_RoboActions;
    private List<IRoboActionsActions> m_RoboActionsActionsCallbackInterfaces = new List<IRoboActionsActions>();
    private readonly InputAction m_RoboActions_Move;
    private readonly InputAction m_RoboActions_MousePosition;
    private readonly InputAction m_RoboActions_Fire;
    private readonly InputAction m_RoboActions_Ready;
    public struct RoboActionsActions
    {
        private @RoboInput m_Wrapper;
        public RoboActionsActions(@RoboInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_RoboActions_Move;
        public InputAction @MousePosition => m_Wrapper.m_RoboActions_MousePosition;
        public InputAction @Fire => m_Wrapper.m_RoboActions_Fire;
        public InputAction @Ready => m_Wrapper.m_RoboActions_Ready;
        public InputActionMap Get() { return m_Wrapper.m_RoboActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RoboActionsActions set) { return set.Get(); }
        public void AddCallbacks(IRoboActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_RoboActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RoboActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Ready.started += instance.OnReady;
            @Ready.performed += instance.OnReady;
            @Ready.canceled += instance.OnReady;
        }

        private void UnregisterCallbacks(IRoboActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Ready.started -= instance.OnReady;
            @Ready.performed -= instance.OnReady;
            @Ready.canceled -= instance.OnReady;
        }

        public void RemoveCallbacks(IRoboActionsActions instance)
        {
            if (m_Wrapper.m_RoboActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRoboActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_RoboActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RoboActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RoboActionsActions @RoboActions => new RoboActionsActions(this);
    public interface IRoboActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnReady(InputAction.CallbackContext context);
    }
}
